package phonebook;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.DefaultListModel;

import java.util.ArrayList;
import java.util.Collections;

public class Phonebook implements ActionListener {

    JFrame frame;
    JTextArea nameField, phoneField, searchField;
    JList<String> contactList;
    DefaultListModel<String> contactListModel;
    JButton addButton, viewButton, searchButton, deleteButton, updateButton;

    public Phonebook() {
        // Frame settings
        frame = new JFrame("Phonebook - Revamped");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 400);
        frame.setLayout(new BorderLayout());
        
        // Sidebar panel
        JPanel sidebar = new JPanel();
        sidebar.setLayout(new BoxLayout(sidebar, BoxLayout.Y_AXIS));
        sidebar.setBackground(new Color(50, 50, 50));
        sidebar.setBorder(new EmptyBorder(10, 10, 10, 10));

        // Text areas with padding
        nameField = createTextArea("Enter Name");
        phoneField = createTextArea("Enter Phone");
        searchField = createTextArea("Search Contacts");

        // Add KeyListeners for input validation
        nameField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!Character.isLetter(c) && !Character.isWhitespace(c)) {
                    e.consume(); // Ignore non-letter input
                }
            }
        });
    phoneField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!Character.isDigit(c)) {
                    e.consume(); // Ignore non-digit input
                }
            }
        });

        sidebar.add(nameField);
        sidebar.add(Box.createVerticalStrut(10)); // Spacer
        sidebar.add(phoneField);
        sidebar.add(Box.createVerticalStrut(10));
        sidebar.add(searchField);

        // Buttons with icons
        addButton = createButton("Add", new Color(0, 153, 76));
        viewButton = createButton("View", new Color(51, 102, 255));
        searchButton = createButton("Search", new Color(255, 153,51)); 
     
        deleteButton = createButton("Delete", new Color(204, 0, 0));
        updateButton = createButton("Update", new Color(102, 0, 153));
        sidebar.add(addButton);
        sidebar.add(viewButton);
        sidebar.add(searchButton);
        sidebar.add(deleteButton);
        sidebar.add(updateButton);

        // Contact list display area
        contactListModel = new DefaultListModel<>();
        contactList = new JList<>(contactListModel);
        contactList.setBackground(new Color(200, 200, 200));
        contactList.setFont(new Font("Arial", Font.PLAIN, 14));
        contactList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        JScrollPane scrollPane = new JScrollPane(contactList);
        scrollPane.setBorder(new EmptyBorder(10, 10, 10, 10));
 
         
        // Add components to frame
        frame.add(sidebar, BorderLayout.WEST);
        frame.add(scrollPane, BorderLayout.CENTER);
        
        // Show the frame
        frame.setVisible(true);
    }
    private JTextArea createTextArea(String placeholder) {
        JTextArea area = new JTextArea(1, 20);
        area.setText(placeholder);
        area.setFont(new Font("Arial", Font.ITALIC, 14));
        area.setForeground(Color.LIGHT_GRAY);
        area.setBackground(new Color(80, 80, 80));
        area.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(new Color(70, 70, 70)),
                BorderFactory.createEmptyBorder(5, 5, 5, 5)
        ));
        area.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                if (area.getText().equals(placeholder)) {
                    area.setText("");
                    area.setForeground(Color.WHITE);
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                if (area.getText().isEmpty()) {
                    area.setText(placeholder);
                    area.setForeground(Color.LIGHT_GRAY);
                }
            }
        });
        return area;
    }

    private JButton createButton(String text, Color color) {
        JButton button = new JButton(text);
        button.setBackground(color);
        button.setForeground(Color.WHITE);
        button.setFont(new Font("Arial", Font.BOLD, 14));
        button.setFocusPainted(false);
        button.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(Color.BLACK),
                BorderFactory.createEmptyBorder(5, 15, 5, 15)
        ));
        button.addActionListener(this);
        return button;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == addButton) {
            String name = nameField.getText().trim();
            String phone = phoneField.getText().trim();
            if (!name.isEmpty() && !phone.isEmpty()) {
                if (!isDuplicateContact(name, phone, null, null)) { // Check for duplicates
                    String contact = "Name: " + name + ", Phone: " + phone;
                    contactListModel.addElement(contact);
                    sortContacts(); // Sort after adding
                    nameField.setText("");
                    phoneField.setText("");
                    JOptionPane.showMessageDialog(frame, "Contact successfully added.");
                } else {
                    JOptionPane.showMessageDialog(frame, "This contact already exists. Please enter a unique name and phone number.");
                }
            } else {
                JOptionPane.showMessageDialog(frame, "Please enter both name and phone number.");
            }
        } else if (e.getSource() == viewButton) {
            if (contactListModel.isEmpty()) {
                JOptionPane.showMessageDialog(frame, "No contacts to display.");
            }
        } else if (e.getSource() == searchButton) {
            String search = searchField.getText().trim();
            StringBuilder results = new StringBuilder();
            boolean found = false;

            for (int i = 0; i < contactListModel.size(); i++) {
                String contact = contactListModel.get(i);
                if (contact.toLowerCase().contains(search.toLowerCase())) {
                    results.append(contact).append("\n");
                    found = true;
                }
            }



